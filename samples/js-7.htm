
<!DOCTYPE html>
 
<html>
    <head>
        
        <title>Kodlama</title>
        
        <meta charset="UTF-8">
        
        <meta name="description" content="Renkleri tara - Çocuklar için kodlama (programlama)">
        <meta name="keywords" content="Renkleri tara - Çocuklar için kodlama (programlama)">
        <meta name="author" content="Buğra ÖZDEN">        
        
        <meta name="viewport" content="initial-scale=1, width=device-width, user-scalable=no">
        <meta name="format-detection" content="telephone=no">
        <meta name="msapplication-tap-highlight" content="no">
        
        <link rel="stylesheet" type="text/css" href="../css/app.css">
        <link rel="stylesheet" type="text/css" href="../css/samples.css">
        <link rel="stylesheet" type="text/css" href="../css/basic-editor.css">
        <link rel="stylesheet" type="text/css" href="../basic/kutuphane/basic-1.3.css">
        
        <script src="../library/src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>
        <script src="../cordova.js" type="text/javascript" charset="utf-8"></script>
        <script src="../js/app.js" type="text/javascript" charset="utf-8"></script>
        <script src="../js/basic-editor.js" type="text/javascript" charset="utf-8"></script>
        <script src="../js/basic-minikeyboard.js" type="text/javascript" charset="utf-8"></script>
        <script src="../basic/kutuphane/basic-1.3.js" type="text/javascript" charset="utf-8"></script>
        
        <style>
        
        .alert-yellow { position:relative;background-color: #F6F6F6;font-family: roboto;margin: 20px;margin-top: 40px;margin-bottom: 40px;padding: 20px;padding-top: 10px;padding-bottom: 10px; color:#4A4A4A;border-radius: 8px;font-size: 18px;text-align: justify;/* line-height: 100%; */ }

        .alert-centered-bold-title { display: block;color:#4A4A4A; font-family: roboto-bold;text-align: center;padding-top: 20px}

        
        </style>
        
        <script>
            
            // var start;
            
            var editor1;
            
            var Page = function(){};
            
            Page.codingInit = function($e){ 
                 
                Coding.currentEditorNumber = $e.editorNumber;
                
                switch($e.editorNumber){
                    
                    case "1":
                        
                        break;
                    
                    }
                
            };
            
            Page.codingFinished = function($e){
                
                switch($e.editorNumber){
                       
                    case "1":
                        
                        break; 
                        
                   }
            
            };
            
            //App.js içerisinden sayfa yüklendiğinde otomatik çalıştırılıyor.
            Page.init = function() {
                
                App.makePageFit("sample");
                
                Coding.init();
                
                document.addEventListener("onGameStarting", Page.codingInit);
                document.addEventListener("onGameStarted", Page.codingFinished);
                document.addEventListener("onGameFinished", Page.codingFinished);
                
                Coding.setOption("1", "resetButtonEnabled", 1);
                //Coding.setOption("1", "saveButtonEnabled", "code-js-s1"); //sample saving path: "code-e2-1"
                
                Coding.createNewEditorHTML("1");
                Coding.setScreenColor("1", "white"); //#F6F6F6, #D8D8D8
                Coding.setScreenHeight("1", "360px");
                editor1 = ace.edit("editor1");
                //editor1.setReadOnly(true);
                Coding.createNewEditor("1");
                Coding.setSnippetIDList("1", Coding.snippetCodingIDList);
                
                // Eğer resetButton aktif ise
                Coding.insertCodeToEditor("1", Coding.getCodeFromDivID("code-example1"));
                // Eğer saveButton aktif ise
                //Coding.insertCodeToEditor("1", Coding.getCodeFromDivID("code-example1"), "code-js-s1");
                
                //Başlangıçta sahneleri oluştur.
                Page.codingInit({editorNumber:'1'});
                
                //App.setPageScore("lesson6", 1);
                
            };
            
            
            
        
        </script>

    </head>
    <body>
        
        <div id="app-cont">
            
            <div class="project-title-box">
                
                <img src="../img/samples/project-title-black.png" width="600" />
                
                <a href="../pages/samples.htm"><div class="project-close-btn"></div></a>
                
                <div id="project-title" class="project-title">Saat</div>
            
            </div>
            
<!-- 1 --><div id="editor-cont1"></div>
            
            <div class="normal-text-group">
                
                <p class="normal-bold-text2">Çalışma Mantığı:</p>
                        
                <ul>
                <li>Saatin her bir hareketli parçası için, bir resim tasarlanmıştır.
                <br>Ve güncel saat bilgisine göre, açısı değiştirilmektedir.</li>
                </ul>

            </div>
            
            
            <div class="page-end-spacing"></div>
        
        </div><!-- content -->

<div id="code-example1" style="display:none">// Saati oluşturan 4 resim nesnesi.
var imgArkaplan
var imgSaat
var imgDakika
var imgSaniye


// İlk çalışan fonksiyon.
var start = function() {

    // Sayfanın, arkaplan rengini bej olarak belirle.
    page.color = "tomato"

    // Saatin arka plan resmini oluştur ve hizala.
    imgArkaplan = createImage()
    that.load("resimler/saat-arkaplan.png")
    that.width = 200
    that.height = 200
    // Nesneyi, ekranın tam ortasına, hesaplayarak hizala.
    that.top = (page.height - that.height) / 2
    that.left = (page.width - that.width) / 2

    // Saat resmini yükle ve hizala.
    imgSaat = createImage()
    that.load("resimler/saat-saat.png")
    boyutKopyala(that, imgArkaplan)
    
    // Dakika resmini yükle ve hizala.
    imgDakika = createImage()
    that.load("resimler/saat-dakika.png")
    boyutKopyala(that, imgArkaplan)
    
    // Saniye resmini yükle ve hizala.
    imgSaniye = createImage()
    that.load("resimler/saat-saniye.png")
    boyutKopyala(that, imgArkaplan)
    
    // Not: Resimlerin hepsi, aynı boyutta üst üste geldiğinde 
    // bir saati oluşturacak şekilde tasarlanmıştır.
    
    // Ana dizindeki, resimler klasörünün içindeki, 
    // ilgili resimleri inceleyebilirsiniz.

}

// Her saniye tekrar çalışan fonksiyon.
var loop = function() {
    
    // BİLGİ:
    // Bir daire, 360 derecedir.
    // Bir saatin dairesinde, 
    // 12 saat, 60 dakika veya 60 saniye vardır.
    
    // SORU:
    // Saat 12'de, resmin derecesi 0 ise
    // Saat 1'de resmin derecesi kaç olmalıdır?
    
    // ÇÖZÜM:
    // 360 dereceyi, 12'ye bölerek,
    // Her 1 saatlik hareketi hesaplayabiliriz.
    
    // CEVAP:
    // 1 saat için 30 derece hareket etmelidir.
    
    // Dakika ve saniye için ise cevap,
    // 360 / 60 = 6 derecedir.
    
    // Şimdi, bu bilgiler ile,
    // saat resimlerinin açılarını, 
    // güncel saat bilgisine göre çevirelim.

    imgSaniye.rotate = clock.second * 6
    imgDakika.rotate = clock.minute * 6
    imgSaat.rotate = clock.hour * 30

    // Not: clock nesnesi, güncel zamanı verir.
    
}

// pYeni nesnesini, pOrnek nesnesinin konum ve boyutunda ayarla.
var boyutKopyala = function(pYeni, pOrnek) {
    
    pYeni.width = pOrnek.width
    pYeni.height = pOrnek.height
    pYeni.top = pOrnek.top
    pYeni.left = pOrnek.left
    
}
</div>        
</body>
</html>
